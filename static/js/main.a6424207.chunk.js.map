{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","click1","Audio","click2","handleBPM","bind","updateInterval","startStop","playClick","state","getInitState","bmpSpeed","this","bpm","timer","setInterval","event","target","value","playing","clearInterval","setState","count","play","platform","activePanel","id","className","handleClick","currentState","header","mode","handleChange","Component","Button","onClick","React","Slider","type","min","max","onChange","Boolean","window","location","hostname","match","bridge","send","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,kC,2KCMrCC,G,gEAEJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,OAAS,IAAIC,MAAM,8DACxB,EAAKC,OAAS,IAAID,MAAM,8DACxB,EAAKE,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,UAAY,EAAKA,UAAUF,KAAf,gBACjB,EAAKG,UAAY,EAAKA,UAAUH,KAAf,gBACjB,EAAKI,MAAQV,EAAIW,eATA,E,6DAsBjB,IAAMC,EAAW,IAAYC,KAAKH,MAAMI,IACxCD,KAAKE,MAAQC,YAAYH,KAAKJ,UAAWG,K,gCAGjCK,GACR,IAAMH,EAAMG,EAAMC,OAAOC,MACrBN,KAAKH,MAAMU,SACXC,cAAcR,KAAKE,OACnBF,KAAKN,iBACLM,KAAKS,SAAS,CACVC,MAAO,EACPT,SAGJD,KAAKS,SAAS,CACVR,U,kCAMiB,IAArBD,KAAKH,MAAMa,MAAaV,KAAKT,OAAOoB,OACnCX,KAAKX,OAAOsB,OACjBX,KAAKS,SAAS,CACVC,MAAOV,KAAKH,MAAMa,MAAQ,M,kCAK1BV,KAAKH,MAAMU,SACXC,cAAcR,KAAKE,OACnBF,KAAKS,SAAS,CACVF,SAAS,MAGbP,KAAKN,iBACLM,KAAKS,SAAS,CACVC,MAAO,EACPH,SAAS,GACVP,KAAKJ,c,+BAKGgB,cAEjB,OAEI,kBAAC,IAAD,aAAMC,YAAY,YAAlB,cAA0Cb,KAAKH,MAAMgB,aACnD,kBAAC,IAAD,CAAOC,GAAG,aACR,kBAAC,IAAD,eACA,kBAAC,IAAD,CAAKC,UAAU,gBACb,kBAAC,EAAD,CAAQC,YAAahB,KAAKL,UAAWsB,aAAcjB,KAAKH,MAAMU,UAEhE,kBAAC,IAAD,CAAOW,OAAQ,kBAAC,IAAD,CAAQC,KAAK,aAAb,2DACb,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAQlB,IAAKD,KAAKH,MAAMI,IAAKmB,aAAcpB,KAAKR,mB,iCAW1DQ,KAAKS,SAAS,CAACI,YAAY,iB,sCA5E3B,MAAO,CACLZ,IAAK,IACLM,SAAS,EACTG,MAAO,EACPG,YAAa,iB,GAnBDQ,cAgGZC,E,uKAEF,OACE,4BAAQC,QAASvB,KAAKZ,MAAM4B,YAAaD,UAAU,eAE/Cf,KAAKZ,MAAM6B,aAAe,OAAS,a,GALxBO,IAAMH,WAYrBI,E,uKAEF,OACE,yBAAKX,GAAG,cACN,6BAEId,KAAKZ,MAAMa,IAFf,OAMA,2BAAOyB,KAAK,QAAQC,IAAI,KAAKC,IAAI,MAAMtB,MAAON,KAAKZ,MAAMa,IAAK4B,SAAU7B,KAAKZ,MAAMgC,oB,GAVtEI,IAAMH,WAgBZlC,I,iBCtHK2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAAOC,KAAK,eAAgB,IAE5BC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a6424207.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport {View, Panel, PanelHeader, Header, Group, Div, FormLayout, platform} from '@vkontakte/vkui'\nimport '@vkontakte/vkui/dist/vkui.css';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    \n    this.click1 = new Audio(\"https://daveceddia.com/freebies/react-metronome/click1.wav\");\n    this.click2 = new Audio(\"https://daveceddia.com/freebies/react-metronome/click1.wav\");\n    this.handleBPM = this.handleBPM.bind(this);\n    this.updateInterval = this.updateInterval.bind(this);\n    this.startStop = this.startStop.bind(this);\n    this.playClick = this.playClick.bind(this);\n    this.state = App.getInitState();\n  }\n\n  static getInitState() {\n    return {\n      bpm: 100,\n      playing: false,\n      count: 0,\n      activePanel: 'homePanel',\n    };\n  }\n\n  updateInterval() {\n    const bmpSpeed = 60 * 1000 / this.state.bpm;\n    this.timer = setInterval(this.playClick, bmpSpeed);\n  }\n\n  handleBPM(event) {\n    const bpm = event.target.value;\n    if (this.state.playing) {\n        clearInterval(this.timer);\n        this.updateInterval();\n        this.setState({\n            count: 0,\n            bpm\n        });\n    } else {\n        this.setState({\n            bpm\n        });\n    };\n  }\n\nplayClick() {\n    if (this.state.count === 0) this.click2.play();\n    else this.click1.play();\n    this.setState({\n        count: this.state.count + 1\n    });\n  }\n\n  startStop() {\n    if (this.state.playing) {\n        clearInterval(this.timer);\n        this.setState({\n            playing: false\n        });\n    } else {\n        this.updateInterval();\n        this.setState({\n            count: 0,\n            playing: true\n        }, this.playClick)\n    }\n  }\n\n  render() {\n    const osname = platform();\n\n  return (\n    //<Root activeView=\"homeView\">\n      <View activePanel=\"homeView\" activePanel={this.state.activePanel}>\n        <Panel id=\"homePanel\">\n          <PanelHeader>Metron</PanelHeader>\n          <Div className='Main-wrapper'>\n            <Button handleClick={this.startStop} currentState={this.state.playing}/>\n\n          <Group header={<Header mode=\"secondary\">Настройки</Header>}>\n            <FormLayout>\n              <Slider bpm={this.state.bpm} handleChange={this.handleBPM}/>\n            </FormLayout>\n          </Group>\n          </Div>\n        </Panel>\n      </View>\n    //</Root>\n    );\n  }\n\n  openMain() {\n    this.setState({activePanel:'homePanel'});\n  }\n\n}\n\nclass Button extends React.Component {\n  render() {\n    return(\n      <button onClick={this.props.handleClick} className=\"Main-button\">\n        {\n          this.props.currentState ? \"Stop\" : \"Start\"\n        }\n      </button>\n    );\n  }\n}\n\nclass Slider extends React.Component {\n  render() {\n    return(\n      <div id=\"bpm-slider\">\n        <div>\n          {\n            this.props.bpm\n          }\n          BPM\n        </div>\n        <input type=\"range\" min=\"60\" max=\"240\" value={this.props.bpm} onChange={this.props.handleChange}></input>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport bridge from '@vkontakte/vk-bridge'\nimport * as serviceWorker from './serviceWorker';\n\nbridge.send(\"VKWebAppInit\", {});\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}