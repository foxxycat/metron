{"version":3,"sources":["samples/click1.wav","samples/click2.wav","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","isToggleOn","count","tempo","click1","Audio","handleClick","bind","this","timerID","setInterval","tick","clearInterval","play","setState","timerStop","timerStart","activePanel","id","className","mode","onClick","header","weight","style","textAlign","min","max","step","value","Number","onChange","React","Component","Boolean","window","location","hostname","match","bridge","send","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,oC,sGCA3CD,EAAOC,QAAU,IAA0B,oC,4KCuJ5BC,G,gEA3Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,YAAY,EACZC,MAAO,EACPC,MAAO,KAGT,EAAKC,OAAS,IAAIC,MAAMD,KACxB,EAAKE,YAAc,EAAKA,YAAYC,KAAjB,gBAVF,E,yDAaL,IAAD,OACXC,KAAKC,QAAUC,aAAY,kBAAM,EAAKC,SAAQ,GAAGH,KAAKR,MAAMG,MAAM,O,kCAIlES,cAAcJ,KAAKC,W,6BAInBD,KAAKJ,OAAOS,OACZL,KAAKM,SAAS,CAACZ,MAAOM,KAAKR,MAAME,MAAQ,M,oCAIzCM,KAAKM,UAAS,SAAAd,GAAK,MAAK,CACtBC,YAAaD,EAAMC,cAChBO,KAAKR,MAAMC,WAAaO,KAAKO,UAAYP,KAAKQ,c,+BAG3C,IAAD,OACP,OACE,kBAAC,IAAD,CAAMC,YAAY,QAChB,kBAAC,IAAD,CAAOC,GAAG,QACR,kBAAC,IAAD,eACA,kBAAC,IAAD,CAAKC,UAAU,gBACb,kBAAC,IAAD,CAAQC,KAAK,UAAUD,UAAU,cAAcE,QAAS,kBAAI,EAAKf,gBAC9DE,KAAKR,MAAMC,WAAa,MAAO,MAE1C,kBAAC,IAAD,KAAOO,KAAKR,MAAME,QAEZ,kBAAC,IAAD,CAAOoB,OAAQ,kBAAC,IAAD,CAAQF,KAAK,aAAb,2DACX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMG,OAAO,UAAUC,MAAO,CAACC,UAAU,WACtCjB,KAAKR,MAAMG,MADd,QAGA,kBAAC,IAAD,CAAQuB,IAAK,GAAIC,IAAK,IAAKC,KAAM,EAAkCC,MAAOC,OAAOtB,KAAKR,MAAMG,OAAQ4B,SAAU,SAAA5B,GAAK,OAAI,EAAKW,SAAS,CAACX,qB,GAjDpI6B,IAAMC,Y,iBC/EJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAAOC,KAAK,eAAgB,IAE5BC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bafed6ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","import React, { Component, useState, useEffect } from 'react';\nimport {View, Panel, PanelHeader, Header, Group, Div, FormLayout, Button, Slider, Text} from '@vkontakte/vkui'\nimport '@vkontakte/vkui/dist/vkui.css';\nimport './App.css';\nimport click1 from '../src/samples/click1.wav'\nimport click2 from '../src/samples/click2.wav'\nimport { render } from '@testing-library/react';\n\n//class App extends React.Component{\n\n  // V 0.01\n  //\n  // constructor(props) {\n  //   super(props);\n\n  //   this.state = {\n  //     // название на кнопке\n  //     label: 'on',\n  //     // бпм\n  //     tempoBpm: 100,\n\n  //     timer: null,\n  //     counter: 0\n  //   };\n\n  //   // добавление аудио\n  //   this.click1 = new Audio(click1);\n\n  //   // обработчик кнопки\n  //   this.toggleMainBtn = this.toggleMainBtn.bind(this);\n  //   this.startTimer = this.startTimer.bind(this);\n  //   this.tick = this.tick.bind(this)\n  //   this.stopTimer = this.stopTimer.bind(this)\n  // }\n\n  // startTimer() {\n  //   let timer = setInterval(this.tick, (60/this.state.tempoBpm*1000));\n  //   this.setState({timer});\n  // }\n\n  // stopTimer() {\n  //   clearInterval(this.state.timer);\n  // }\n\n  // tick() {\n  //   this.click1.play()\n  // }\n\n  // // метод обработки нажатия на кнопку\n  // toggleMainBtn() {\n  //   let label = this.state.label === 'off' ? /*tempoBpm*/ 'on' : 'off';\n\n  //   if(this.state.label === 'on') {\n  //     this.click1.play()\n\n  //     this.startTimer()\n  //   }\n  //   else {\n  //     this.stopTimer()\n  //   }\n  //   this.setState({label: label});\n  // }\n\n  // рендеринг страницы\n  // render() {\n  //   return(\n      // V 0.01\n      //\n      // <View activePanel='Main'>\n      //   <Panel id='Main'>\n      //     <PanelHeader>Metron</PanelHeader>\n      //     <Div className='Main-wrapper'>\n      //       <Button mode='outline' className='Main-button' onClick={this.toggleMainBtn}>\n      //         {this.state.label}\n      //       </Button>\n      //     </Div>\n      //     <Group header={<Header mode='secondary'>Настройки</Header>}>\n      //         <FormLayout>\n      //           <Text weight='regular' style={{textAlign:'center'}}>\n      //             {this.state.tempoBpm} bpm\n      //           </Text>\n      //           <Slider min={60} max={240} step={1} /*top={this.state.tempoBpm }*/ value={Number(this.state.tempoBpm)} onChange={tempoBpm => this.setState({tempoBpm})}></Slider>\n      //         </FormLayout>\n      //       </Group>\n      //   </Panel>\n      // </View>\n//     );\n//   }\n// }\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isToggleOn: false,\n      count: 0,\n      tempo: 100\n    }\n\n    this.click1 = new Audio(click1);\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  timerStart() {\n    this.timerID = setInterval(() => this.tick(),(60/this.state.tempo*1000))\n  }\n\n  timerStop() {\n    clearInterval(this.timerID)\n  }\n\n  tick() {\n    this.click1.play();\n    this.setState({count: this.state.count + 1})\n  }\n\n  handleClick() {\n    this.setState(state => ({\n      isToggleOn: !state.isToggleOn\n    }), (this.state.isToggleOn ? this.timerStop : this.timerStart));\n  }\n\n  render() {\n    return(\n      <View activePanel='Main'>\n        <Panel id='Main'>\n          <PanelHeader>Metron</PanelHeader>\n          <Div className='Main-wrapper'>\n            <Button mode='outline' className='Main-button' onClick={()=>this.handleClick()}>\n              {this.state.isToggleOn ? 'off': 'on'}\n            </Button>\n    <Text>{this.state.count}</Text>\n          </Div>\n          <Group header={<Header mode='secondary'>Настройки</Header>}>\n              <FormLayout>\n                <Text weight='regular' style={{textAlign:'center'}}>\n                  {this.state.tempo} bpm\n                </Text>\n                <Slider min={60} max={240} step={1} /*top={this.state.tempoBpm }*/ value={Number(this.state.tempo)} onChange={tempo => this.setState({tempo})}></Slider>\n              </FormLayout>\n            </Group>\n        </Panel>\n      </View>\n    );\n  }  \n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport bridge from '@vkontakte/vk-bridge'\nimport * as serviceWorker from './serviceWorker';\n\nbridge.send(\"VKWebAppInit\", {});\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}