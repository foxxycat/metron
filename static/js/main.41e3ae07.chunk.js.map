{"version":3,"sources":["App.js","serviceWorker.js","index.js","samples/click1.wav","samples/click2.wav","logo.svg"],"names":["App","props","handleBpmChange","event","bpm","target","value","state","playing","clearInterval","timer","setInterval","playClick","setState","count","beatsPerMeasure","click2","play","click1","startStop","Audio","getInitState","platform","this","activePanel","id","className","mode","onClick","header","min","max","onChange","Component","Boolean","window","location","hostname","match","bridge","send","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"sRA2LeA,E,kDAjLb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA0CRC,gBAAkB,SAAAC,GAChB,IAAMC,EAAMD,EAAME,OAAOC,MACtB,EAAKC,MAAMC,SACZC,cAAc,EAAKC,OACnB,EAAKA,MAAQC,YAAY,EAAKC,UAAY,GAAIR,EAAM,KACpD,EAAKS,SAAS,CACZC,MAAM,EACNV,SAGF,EAAKS,SAAS,CAACT,SArDA,EAiErBQ,UAAY,WAAM,IAAD,EACiB,EAAKL,MADtB,EACTO,MADS,EACFC,kBAEiB,EAC5B,EAAKC,OAAOC,OAEZ,EAAKC,OAAOD,OAEd,EAAKJ,UAAS,SAAAN,GAAK,MAAK,CACtBO,OAAQP,EAAMO,MAAQ,GAAKP,EAAMQ,qBA1EhB,EA6FnBI,UAAY,WACP,EAAKZ,MAAMC,SACZC,cAAc,EAAKC,OACnB,EAAKG,SAAS,CACZL,SAAQ,MAGV,EAAKE,MAAQC,YACX,EAAKC,UACJ,GAAG,EAAKL,MAAMH,IAAK,KAEtB,EAAKS,SAAS,CACZC,MAAM,EACNN,SAAQ,GAEV,EAAKI,aAzGP,EAAKM,OAAS,IAAIE,MAAMF,KACxB,EAAKF,OAAS,IAAII,MAAMJ,KAKxB,EAAKT,MAAQP,EAAIqB,eATA,E,qDAkHFC,cAAf,IADO,EAEgBC,KAAKhB,MAAZH,GAFT,EAEAI,QAFA,EAESJ,KAElB,OAEI,kBAAC,IAAD,aAAMoB,YAAY,YAAlB,cAA0CD,KAAKhB,MAAMiB,aACnD,kBAAC,IAAD,CAAOC,GAAG,aACR,kBAAC,IAAD,eACA,kBAAC,IAAD,CAAKC,UAAU,gBAEb,kBAAC,IAAD,CAAQC,KAAK,UAAUD,UAAU,cAAcE,QAASL,KAAKJ,WAEzDI,KAAKf,QAAU,OAAS,UAK9B,kBAAC,IAAD,CAAOqB,OAAQ,kBAAC,IAAD,CAAQF,KAAK,aAAb,2DACb,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAQG,IAAK,GAAIC,IAAK,IAAKzB,MAAOF,EAAK4B,SAAUT,KAAKrB,wB,iCAUhEqB,KAAKV,SAAS,CAACW,YAAY,iB,sCAnI3B,MAAO,CACLpB,IAAK,IACLI,SAAS,EACTM,MAAO,EACPU,YAAa,YACbT,gBAAiB,O,GApBLkB,a,iBCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAAOC,KAAK,eAAgB,IAE5BC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,6ECA3CD,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.41e3ae07.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport {View, Panel, PanelHeader, Header, Group, Div, FormLayout, platform, Button, Slider} from '@vkontakte/vkui'\nimport '@vkontakte/vkui/dist/vkui.css';\nimport './App.css';\nimport click1 from '../src/samples/click1.wav'\nimport click2 from '../src/samples/click2.wav'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    \n    this.click1 = new Audio(click1);\n    this.click2 = new Audio(click2);\n    // this.handleBPM = this.handleBPM.bind(this);\n    // this.updateInterval = this.updateInterval.bind(this);\n    // this.startStop = this.startStop.bind(this);\n    // this.playClick = this.playClick.bind(this);\n    this.state = App.getInitState();\n  }\n\n  static getInitState() {\n    return {\n      bpm: 100,\n      playing: false,\n      count: 0,\n      activePanel: 'homePanel',\n      beatsPerMeasure: 4\n    };\n  }\n\n  // updateInterval() {\n  //   const bmpSpeed = 60 * 1000 / this.state.bpm;\n  //   this.timer = setInterval(this.playClick, bmpSpeed);\n  // }\n\n  // handleBPM(event) {\n  //   const bpm = event.target.value;\n  //   if (this.state.playing) {\n  //       clearInterval(this.timer);\n  //       this.updateInterval();\n  //       this.setState({\n  //           count: 0,\n  //           bpm\n  //       });\n  //   } else {\n  //       this.setState({\n  //           bpm\n  //       });\n  //   };\n  // }\n\n  handleBpmChange = event =>{\n    const bpm = event.target.value;\n    if(this.state.playing){\n      clearInterval(this.timer);\n      this.timer = setInterval(this.playClick, (60/ bpm) *1000);\n      this.setState({\n        count:0,\n        bpm\n      });\n    }else{\n      this.setState({bpm});\n    }\n  }\n\n// playClick() {\n//     if (this.state.count === 0) this.click2.play();\n//     else this.click1.play();\n//     this.setState({\n//         count: this.state.count + 1\n//     });\n//   }\n\nplayClick = () =>{\n  const{count, beatsPerMeasure} = this.state;\n\n  if(count% beatsPerMeasure === 0){\n    this.click2.play();\n  }else{\n    this.click1.play();\n  }\n  this.setState(state => ({\n    count: (state.count + 1) % state.beatsPerMeasure\n  }));\n};\n\n  // startStop() {\n  //   if (this.state.playing) {\n  //       clearInterval(this.timer);\n  //       this.setState({\n  //           playing: false\n  //       });\n  //   } else {\n  //       this.updateInterval();\n  //       this.setState({\n  //           count: 0,\n  //           playing: true\n  //       }, this.playClick)\n  //   }\n  // }\n\n  startStop = () => {\n    if(this.state.playing){\n      clearInterval(this.timer);\n      this.setState({\n        playing:false\n      });\n    }else{\n      this.timer = setInterval(\n        this.playClick,\n        (60/this.state.bpm)*1000\n      );\n      this.setState({\n        count:0,\n        playing:true,\n      },\n      this.playClick\n      );\n    }\n  };\n\n  render() {\n    const osname = platform();\n    const {playing, bpm} = this.state\n\n  return (\n    //<Root activeView=\"homeView\">\n      <View activePanel=\"homeView\" activePanel={this.state.activePanel}>\n        <Panel id=\"homePanel\">\n          <PanelHeader>Metron</PanelHeader>\n          <Div className='Main-wrapper'>\n            {/* <Button handleClick={this.startStop} currentState={this.state.playing}/> */}\n            <Button mode='outline' className='Main-button' onClick={this.startStop}>\n              {\n                this.playing ? 'Stop' : 'Start'\n              }\n            </Button>\n          </Div>\n\n          <Group header={<Header mode=\"secondary\">Настройки</Header>}>\n            <FormLayout>\n              {/* <Slider bpm={this.state.bpm} handleChange={this.handleBPM}/> */}\n              <Slider min={60} max={240} value={bpm} onChange={this.handleBpmChange}></Slider>\n            </FormLayout>\n          </Group>\n        </Panel>\n      </View>\n    //</Root>\n    );\n  }\n\n  openMain() {\n    this.setState({activePanel:'homePanel'});\n  }\n\n}\n\n// class Button extends React.Component {\n//   render() {\n//     return(\n//       <button onClick={this.props.handleClick} className=\"Main-button\">\n//         {\n//           this.props.currentState ? \"Stop\" : \"Start\"\n//         }\n//       </button>\n//     );\n//   }\n// }\n\n// class Slider extends React.Component {\n//   render() {\n//     return(\n//       <div id=\"bpm-slider\">\n//         <div>\n//           {\n//             this.props.bpm\n//           }\n//           BPM\n//         </div>\n//         <input type=\"range\" min=\"60\" max=\"240\" value={this.props.bpm} onChange={this.props.handleChange}></input>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport bridge from '@vkontakte/vk-bridge'\nimport * as serviceWorker from './serviceWorker';\n\nbridge.send(\"VKWebAppInit\", {});\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}